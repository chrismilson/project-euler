# -*- coding: utf-8 -*-
""" Chris Milson April 2020
Problem 29

Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

```
2^2 = 4, 2^3 = 8, 2^4 = 16, 2^5 = 32
3^2 = 9, 3^3 = 27, 3^4 = 81, 3^5 = 243
4^2 = 16, 4^3 = 64, 4^4 = 256, 4^5 = 1024
5^2 = 25, 5^3 = 125, 5^4 = 625, 5^5 = 3125
```

If they are then placed in numerical order, with any repeats removed, we get the
following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and
2 ≤ b ≤ 100?

## Solution

The upper bound is (maxA - minA) * (maxB - minB). However any duplicates will be
counted as well. We want to know for what a1, b1, a2, b2 we have a1^b1 = a2^b2
and a1 != a2, b1 != b2.

If a1 = a2^2 and b1 = 2 * b2, then this will occur. We can extend this reasoning
to see that for all k, if a1 = a2^k and b1 = k * b2, then it will occur. By
algebra, we can see

a1 = a2^(b2 / b1)

So our k argument only sees the b2/b1 that are integers, and wouldn't catch all
of them.

Answer : 9183
"""

def distinctPowers(upperLimit):
  seen = set()

  for a in range(2, upperLimit + 1):
    for b in range(2, upperLimit + 1):
      seen.add(a ** b)

  return len(seen)

print(distinctPowers(100))